apply plugin: 'java'

targetCompatibility = '1.11'
sourceCompatibility = '1.11'

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.google.gradle:osdetector-gradle-plugin:1.6.0'
    }
}

apply plugin: 'application'
apply plugin: 'com.google.osdetector'

ext.platform = osdetector.os == 'osx' ? 'mac' : osdetector.os == 'windows' ? 'win' : osdetector.os

repositories {
    mavenCentral()
}

dependencies {
    compile "org.openjfx:javafx-base:11:$platform"
    compile "org.openjfx:javafx-graphics:11:$platform"
    compile "org.openjfx:javafx-controls:11:$platform"
    compile "org.openjfx:javafx-fxml:11:$platform"
    compile "org.openjfx:javafx-media:11:$platform"
}

compileJava {
    doFirst {
        options.compilerArgs = [
		'--module-path', classpath.asPath,
		'--add-modules', 'javafx.controls,javafx.fxml,javafx.media,javafx.graphics',
		'--add-exports', 'javafx.media/com.sun.media.jfxmedia.control=ALL-UNNAMED',
		'--add-exports','javafx.graphics/com.sun.prism=ALL-UNNAMED',
		'--add-exports','javafx.graphics/com.sun.prism.impl=ALL-UNNAMED'
        ]
        classpath = files()  
    }
}

run	 {
	doFirst {
		jvmArgs = ["--module-path", classpath.asPath, "--add-modules", "javafx.controls,javafx.fxml,javafx.media"]
		if (project.hasProperty('sw_rendering')) {
      		jvmArgs = jvmArgs +"-Dprism.order=sw"
  		}
		if (project.hasProperty('verbose')){
			jvmArgs = jvmArgs +"-Dprism.verbose=true"+"-Xlog:gc*"
		}
	}
}

mainClassName='com.chrisnewland.demofx.DemoFXApplication'